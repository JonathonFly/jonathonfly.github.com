---
layout: post
category : Java
tagline: 
tags : [javamail, multi-thread]
---
{% include JB/setup %}

最近在开发项目新需求，要做设备下线和设备端口流量超过阈值的邮件告警功能，特此记录一下。

所谓邮件告警，也就是实现邮件发送功能。利用现有的javamail可以轻松实现。为了增加发送效率，起了几个线程用于发送工作。

工作原理是起一个定时任务，从数据库读取要发送的邮件信息，将这些信息加入到队列中，几个发送线程不断从队列中取邮件信息，然后发送出去。当队列中的邮件信息全部发送完毕后，发送线程等待。直到有新的邮件入队列。

原理说了，下面贴上主要代码：

邮件主要信息类
TAlertMail.java

<div class="highlight highlight-source-java"><pre><span class="pl-k">package</span> <span class="pl-smi">com.binarysoft.service.alertmail</span>;

<span class="pl-k">import</span> <span class="pl-smi">java.util.Date</span>;

<span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-en">TAlertMail</span> {
    <span class="pl-k">private</span> <span class="pl-smi">Long</span> l3Id;

    <span class="pl-k">private</span> <span class="pl-smi">Integer</span> active;

    <span class="pl-k">private</span> <span class="pl-smi">Date</span> modifyTime;

    <span class="pl-k">private</span> <span class="pl-smi">Integer</span> hasSend;

    <span class="pl-k">private</span> <span class="pl-smi">Long</span> neId;

    <span class="pl-k">private</span> <span class="pl-smi">String</span> alertType;

    <span class="pl-k">public</span> <span class="pl-smi">Long</span> <span class="pl-en">getL3Id</span>() {
        <span class="pl-k">return</span> l3Id;
    }

    <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">setL3Id</span>(<span class="pl-smi">Long</span> <span class="pl-v">l3Id</span>) {
        <span class="pl-v">this</span><span class="pl-k">.</span>l3Id <span class="pl-k">=</span> l3Id;
    }

    <span class="pl-k">public</span> <span class="pl-smi">Integer</span> <span class="pl-en">getActive</span>() {
        <span class="pl-k">return</span> active;
    }

    <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">setActive</span>(<span class="pl-smi">Integer</span> <span class="pl-v">active</span>) {
        <span class="pl-v">this</span><span class="pl-k">.</span>active <span class="pl-k">=</span> active;
    }

    <span class="pl-k">public</span> <span class="pl-smi">Date</span> <span class="pl-en">getModifyTime</span>() {
        <span class="pl-k">return</span> modifyTime;
    }

    <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">setModifyTime</span>(<span class="pl-smi">Date</span> <span class="pl-v">modifyTime</span>) {
        <span class="pl-v">this</span><span class="pl-k">.</span>modifyTime <span class="pl-k">=</span> modifyTime;
    }

    <span class="pl-k">public</span> <span class="pl-smi">Integer</span> <span class="pl-en">getHasSend</span>() {
        <span class="pl-k">return</span> hasSend;
    }

    <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">setHasSend</span>(<span class="pl-smi">Integer</span> <span class="pl-v">hasSend</span>) {
        <span class="pl-v">this</span><span class="pl-k">.</span>hasSend <span class="pl-k">=</span> hasSend;
    }

    <span class="pl-k">public</span> <span class="pl-smi">Long</span> <span class="pl-en">getNeId</span>() {
        <span class="pl-k">return</span> neId;
    }

    <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">setNeId</span>(<span class="pl-smi">Long</span> <span class="pl-v">neId</span>) {
        <span class="pl-v">this</span><span class="pl-k">.</span>neId <span class="pl-k">=</span> neId;
    }

    <span class="pl-k">public</span> <span class="pl-smi">String</span> <span class="pl-en">getAlertType</span>() {
        <span class="pl-k">return</span> alertType;
    }

    <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">setAlertType</span>(<span class="pl-smi">String</span> <span class="pl-v">alertType</span>) {
        <span class="pl-v">this</span><span class="pl-k">.</span>alertType <span class="pl-k">=</span> alertType <span class="pl-k">==</span> <span class="pl-c1">null</span> <span class="pl-k">?</span> <span class="pl-c1">null</span> <span class="pl-k">:</span> alertType<span class="pl-k">.</span>trim();
    }
}</pre></div>

TAlertMailWithBLOBs.java

<div class="highlight highlight-source-java"><pre><span class="pl-k">package</span> <span class="pl-smi">com.binarysoft.service.alertmail</span>;

<span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-en">TAlertMailWithBLOBs</span> <span class="pl-k">extends</span> <span class="pl-e">TAlertMail</span> {
    <span class="pl-k">private</span> <span class="pl-smi">String</span> sendTo;

    <span class="pl-k">private</span> <span class="pl-smi">String</span> cc;

    <span class="pl-k">private</span> <span class="pl-smi">String</span> mailTitle;

    <span class="pl-k">private</span> <span class="pl-smi">String</span> mailContent;

    <span class="pl-k">private</span> <span class="pl-smi">String</span> attach;

    <span class="pl-k">public</span> <span class="pl-smi">String</span> <span class="pl-en">getSendTo</span>() {
        <span class="pl-k">return</span> sendTo;
    }

    <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">setSendTo</span>(<span class="pl-smi">String</span> <span class="pl-v">sendTo</span>) {
        <span class="pl-v">this</span><span class="pl-k">.</span>sendTo <span class="pl-k">=</span> sendTo <span class="pl-k">==</span> <span class="pl-c1">null</span> <span class="pl-k">?</span> <span class="pl-c1">null</span> <span class="pl-k">:</span> sendTo<span class="pl-k">.</span>trim();
    }

    <span class="pl-k">public</span> <span class="pl-smi">String</span> <span class="pl-en">getCc</span>() {
        <span class="pl-k">return</span> cc;
    }

    <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">setCc</span>(<span class="pl-smi">String</span> <span class="pl-v">cc</span>) {
        <span class="pl-v">this</span><span class="pl-k">.</span>cc <span class="pl-k">=</span> cc <span class="pl-k">==</span> <span class="pl-c1">null</span> <span class="pl-k">?</span> <span class="pl-c1">null</span> <span class="pl-k">:</span> cc<span class="pl-k">.</span>trim();
    }

    <span class="pl-k">public</span> <span class="pl-smi">String</span> <span class="pl-en">getMailTitle</span>() {
        <span class="pl-k">return</span> mailTitle;
    }

    <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">setMailTitle</span>(<span class="pl-smi">String</span> <span class="pl-v">mailTitle</span>) {
        <span class="pl-v">this</span><span class="pl-k">.</span>mailTitle <span class="pl-k">=</span> mailTitle <span class="pl-k">==</span> <span class="pl-c1">null</span> <span class="pl-k">?</span> <span class="pl-c1">null</span> <span class="pl-k">:</span> mailTitle<span class="pl-k">.</span>trim();
    }

    <span class="pl-k">public</span> <span class="pl-smi">String</span> <span class="pl-en">getMailContent</span>() {
        <span class="pl-k">return</span> mailContent;
    }

    <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">setMailContent</span>(<span class="pl-smi">String</span> <span class="pl-v">mailContent</span>) {
        <span class="pl-v">this</span><span class="pl-k">.</span>mailContent <span class="pl-k">=</span> mailContent <span class="pl-k">==</span> <span class="pl-c1">null</span> <span class="pl-k">?</span> <span class="pl-c1">null</span> <span class="pl-k">:</span> mailContent<span class="pl-k">.</span>trim();
    }

    <span class="pl-k">public</span> <span class="pl-smi">String</span> <span class="pl-en">getAttach</span>() {
        <span class="pl-k">return</span> attach;
    }

    <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">setAttach</span>(<span class="pl-smi">String</span> <span class="pl-v">attach</span>) {
        <span class="pl-v">this</span><span class="pl-k">.</span>attach <span class="pl-k">=</span> attach <span class="pl-k">==</span> <span class="pl-c1">null</span> <span class="pl-k">?</span> <span class="pl-c1">null</span> <span class="pl-k">:</span> attach<span class="pl-k">.</span>trim();
    }
}</pre></div>

邮件发送类
SendMailServiceBean.java

```java
package com.binarysoft.service.sendmail;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Properties;

import javax.mail.AuthenticationFailedException;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.NoSuchProviderException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

import org.apache.commons.lang.StringUtils;

import com.binarysoft.service.alertmail.TAlertMailService;
import com.binarysoft.service.alertmail.TAlertMailWithBLOBs;
import common.framework.dsb.AbstractServiceBean;
import common.framework.dsb.annotation.DSBLog;
import common.framework.dsb.annotation.DSBService;
import common.framework.dsb.client.DefaultServiceFactory;
import common.framework.dsb.client.ServiceFactory;
import common.framework.dsb.service.ServiceContext;
import common.framework.log.Logger;

public class SendMailServiceBean extends AbstractServiceBean implements SendMailService {
	private LinkedList<TAlertMailWithBLOBs> mailInfoList = new LinkedList<TAlertMailWithBLOBs>();
	private String mailHost;
	private String protocol;
	private String port;
	private String fromMail;
	private String password;
	private String user;
	private String timeout;
	private String debug;
	private int sendTotal = 0;
	private static final Integer IS_ACTIVE = 1;
	private boolean isActive = true;

	@Override
	public void start(ServiceContext serviceContext) throws Exception {
		super.start(serviceContext);
		serviceContext.loadConfigProperties("sendmail.properties");
		int workerNum = Integer.parseInt(serviceContext.getProperty("worker"));
		mailHost = serviceContext.getProperty("host");
		port = serviceContext.getProperty("port");
		protocol = serviceContext.getProperty("protocol");
		fromMail = serviceContext.getProperty("from");
		user = serviceContext.getProperty("user");
		password = serviceContext.getProperty("password");
		timeout = serviceContext.getProperty("timeout");
		debug = serviceContext.getProperty("debug");
		if (workerNum < 3)
			workerNum = 3;
		for (int i = 0; i < workerNum; i++) {
			new Sender(i + 1).start();
		}
	}

	@Override
	public void refresh() throws Exception {

	}

	@Override
	public void close() throws Exception {
		this.isActive = false;
		this.sendTotal = 0;
		this.mailInfoList.clear();
	}

	@Override
	public int addAllMailList() throws Exception {
		List<TAlertMailWithBLOBs> list = new ArrayList<TAlertMailWithBLOBs>();
		ServiceFactory serviceFactory = new DefaultServiceFactory();
		TAlertMailService alertMailService = (TAlertMailService) serviceFactory.lookup("DSB/TAlertMailService");
		Collection<TAlertMailWithBLOBs> mails = alertMailService.getAllAlertMail();
		for (TAlertMailWithBLOBs alertMailWithBLOBs : mails) {
			if (alertMailWithBLOBs.getActive() == IS_ACTIVE) {
				list.add(alertMailWithBLOBs);
			}
		}
		// 加入待发送队列
		synchronized (this.mailInfoList) {
			this.mailInfoList.addAll(list);
			this.mailInfoList.notifyAll();
		}
		return list.size();
	}

	@Override
	public int addMail(TAlertMailWithBLOBs alertMailWithBLOBs) throws Exception {
		if (alertMailWithBLOBs.getActive() == IS_ACTIVE && alertMailWithBLOBs.getSendTo() != null && !alertMailWithBLOBs.getSendTo().equals("")) {
			// 加入待发送队列
			synchronized (this.mailInfoList) {
				this.mailInfoList.add(alertMailWithBLOBs);
				this.mailInfoList.notifyAll();
			}
			return 1;
		} else {
			return 0;
		}
	}

	@Override
	public int addMailCollection(Collection<TAlertMailWithBLOBs> mailCollection) throws Exception {
		List<TAlertMailWithBLOBs> list = new ArrayList<TAlertMailWithBLOBs>();
		for (TAlertMailWithBLOBs alertMailWithBLOBs : mailCollection) {
			if (alertMailWithBLOBs.getActive() == IS_ACTIVE && alertMailWithBLOBs.getSendTo() != null && !alertMailWithBLOBs.getSendTo().equals("")) {
				list.add(alertMailWithBLOBs);
			}
		}
		// 加入待发送队列
		synchronized (this.mailInfoList) {
			this.mailInfoList.addAll(list);
			this.mailInfoList.notifyAll();
		}
		return list.size();
	}

	private class Sender extends Thread {
		// 线程编号，从1开始
		private int num;

		public Sender(int i) {
			this.num = i;
		}

		@Override
		public void run() {
			Logger.log(Logger.FATAL_LEVEL, "send thread " + num + " is running.");
			try {
				ServiceFactory serviceFactory = new DefaultServiceFactory();
				TAlertMailService alertMailService = (TAlertMailService) serviceFactory.lookup("DSB/TAlertMailService");
				while (isActive) {
					TAlertMailWithBLOBs mailInfo = null;
					synchronized (mailInfoList) {
						// 还有邮件要发，取队列中的第一封
						if (mailInfoList.size() > 0) {
							mailInfo = mailInfoList.removeFirst();
						} else {
							Logger.log(Logger.FATAL_LEVEL, "thread" + num + " is waiting for an email.");
							mailInfoList.wait();
						}
					}// 同步方法结束

					// 发送邮件
					if (mailInfo != null) {
						try {
							Properties props = new Properties();
							props.setProperty("mail.debug", debug);
							// 发送服务器需要身份验证
							props.setProperty("mail.smtp.auth", "true");
							// 设置邮件服务器主机名
							props.setProperty("mail.host", mailHost);
							props.setProperty("mail.port", port);
							// 发送邮件协议名称
							props.setProperty("mail.transport.protocol", protocol);
							props.setProperty("mail.smtp.timeout", timeout);
							props.setProperty("mail.smtp.connectiontimeout", timeout);

							Session session = Session.getInstance(props);
							// 生成邮件内容
							MimeMessage message = getMailContent(session, fromMail, mailInfo.getSendTo(), mailInfo.getCc(), mailInfo.getMailTitle(), mailInfo.getMailContent());

							Transport transport = session.getTransport();
							transport.connect(user, password);  
							transport.sendMessage(message, message.getAllRecipients());
							// 标记为已发送，时间为发送时间
							mailInfo.setHasSend(1);
							mailInfo.setModifyTime(new Date());
							alertMailService.updateByPrimaryKey(mailInfo);
							sendTotal++;
							System.out.println("sender" + num + " send an email success!");
							transport.close();
						} catch (NoSuchProviderException ex) {
							System.out.println(ex);
						} catch (AuthenticationFailedException ex) {
							System.out.println(ex);
						} catch (MessagingException ex) {
							System.out.println(ex);
						}

					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

	}

	private static MimeMessage getMailContent(Session session, String fromMail, String toMailStr, String ccStr, String mailTitle, String mailContent) throws MessagingException {
		// 由邮件会话新建一个消息对象
		MimeMessage message = new MimeMessage(session);
		// 设置发件人的地址
		message.setFrom(new InternetAddress(fromMail));
		// 设置收件人,并设置其接收类型为TO
		String[] toMail = null;
		String[] cC = null;
		if (StringUtils.isNotBlank(toMailStr))
			toMail = toMailStr.split(";|；");
		if (StringUtils.isNotBlank(ccStr))
			cC = ccStr.split(";|；");
		if (toMail != null && toMail.length > 0) {
			for (int i = 0; i < toMail.length; i++)
				message.addRecipient(Message.RecipientType.TO, new InternetAddress(toMail[i]));
		}
		// 设置抄送人,并设置其接收类型为cc
		if (cC != null && cC.length > 0) {
			for (int i = 0; cC != null && i < cC.length; i++)
				message.addRecipient(Message.RecipientType.CC, new InternetAddress(cC[i]));
		}
		// 设置标题
		message.setSubject(mailTitle);
		// 设置信件内容
		// 发送HTML邮件
		message.setContent(mailContent, "text/html;charset=gbk");
		// 设置发信时间
		message.setSentDate(new Date());
		// 存储邮件信息
		message.saveChanges();
		return message;
	}

	@Override
	public int getHasSendMailNum() {
		return this.sendTotal;
	}

	@Override
	public int getLeftMailNum() {
		return this.mailInfoList.size();
	}

	@Override
	public void clearMailQueue() {
		this.sendTotal = 0;
		this.mailInfoList.clear();
	}

}

```