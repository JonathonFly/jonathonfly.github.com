---
layout: post
category : Java
tagline: 
tags : []
---
{% include JB/setup %}

经过测试，发现ajax跨域登录在IE8下存在问题。

问题描述为：当第一次打开IE浏览器时，第一次登录后的跳转错误，总是跳转到登录页面，后面的登录跳转便不再有任何问题。于是，我用抓包工具Fiddler对在不同浏览器下的情况分别做分析，终于发现了问题的缘由。

在Firefox和Chrome浏览器下，在给目标网站发送ajax请求的时候，浏览器就为请求创建了名为jsessionid的cookie。在登录以后，发送跳转网站首页的请求就会带上这个名为jsessionid的cookie，用于网站判断登录校验。

而在IE8浏览器下，第一次发送ajax请求时，浏览器并不会创建这个cookie。而是在第一次真正跳转到该网站时，才会第一次创建这个名为jsessionid的cookie。

**Firefox下的抓包结果如下面2幅图所示：**

<a href="https://raw.githubusercontent.com/JonathonFly/jonathonfly.github.com/master/_posts/core-samples/pictures/2015-11-27/1.png" target="_blank">
<img src="https://raw.githubusercontent.com/JonathonFly/jonathonfly.github.com/master/_posts/core-samples/pictures/2015-11-27/1.png" style="max-width:100%;"></a>

<a href="https://raw.githubusercontent.com/JonathonFly/jonathonfly.github.com/master/_posts/core-samples/pictures/2015-11-27/2.png" target="_blank">
<img src="https://raw.githubusercontent.com/JonathonFly/jonathonfly.github.com/master/_posts/core-samples/pictures/2015-11-27/2.png" style="max-width:100%;"></a>

**IE下的抓包结果如下面3幅图所示：**

<a href="https://raw.githubusercontent.com/JonathonFly/jonathonfly.github.com/master/_posts/core-samples/pictures/2015-11-27/3.png" target="_blank">
<img src="https://raw.githubusercontent.com/JonathonFly/jonathonfly.github.com/master/_posts/core-samples/pictures/2015-11-27/3.png" style="max-width:100%;"></a>

<a href="https://raw.githubusercontent.com/JonathonFly/jonathonfly.github.com/master/_posts/core-samples/pictures/2015-11-27/4.png" target="_blank">
<img src="https://raw.githubusercontent.com/JonathonFly/jonathonfly.github.com/master/_posts/core-samples/pictures/2015-11-27/4.png" style="max-width:100%;"></a>

<a href="https://raw.githubusercontent.com/JonathonFly/jonathonfly.github.com/master/_posts/core-samples/pictures/2015-11-27/5.png" target="_blank">
<img src="https://raw.githubusercontent.com/JonathonFly/jonathonfly.github.com/master/_posts/core-samples/pictures/2015-11-27/5.png" style="max-width:100%;"></a>

最终，我还是放弃了用jsonp跨域访问的方式，而是采用最原始的超链接访问的方式实现跳转。因为超链接方式是先跳转到目标网站，再进行登录操作，而此时，即便是IE浏览器也已经创建了jsessionid。

为了保证一定的安全性，我为目标网站新写了一个登录方法：loginsso，方法中对传递过来的参数进行AES解密后，再执行登录操作。

AES加密策略为“AES/CBC/PKCS5PADDING”，使用一个约定的key和初始化向量即可。

AES加密工具类主要代码如下：

<div class="highlight highlight-source-java"><pre><span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-en">AESCode</span> {
    <span class="pl-k">public</span> <span class="pl-k">static</span> <span class="pl-smi">String</span> <span class="pl-en">encrypt</span>(<span class="pl-smi">String</span> <span class="pl-v">key</span>, <span class="pl-smi">String</span> <span class="pl-v">initVector</span>, <span class="pl-smi">String</span> <span class="pl-v">value</span>) {
        <span class="pl-k">try</span> {
            <span class="pl-smi">IvParameterSpec</span> iv <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-smi">IvParameterSpec</span>(initVector<span class="pl-k">.</span>getBytes(<span class="pl-s"><span class="pl-pds">"</span>UTF-8<span class="pl-pds">"</span></span>));
            <span class="pl-smi">SecretKeySpec</span> skeySpec <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-smi">SecretKeySpec</span>(key<span class="pl-k">.</span>getBytes(<span class="pl-s"><span class="pl-pds">"</span>UTF-8<span class="pl-pds">"</span></span>), <span class="pl-s"><span class="pl-pds">"</span>AES<span class="pl-pds">"</span></span>);

            <span class="pl-smi">Cipher</span> cipher <span class="pl-k">=</span> <span class="pl-smi">Cipher</span><span class="pl-k">.</span>getInstance(<span class="pl-s"><span class="pl-pds">"</span>AES/CBC/PKCS5PADDING<span class="pl-pds">"</span></span>);
            cipher<span class="pl-k">.</span>init(<span class="pl-smi">Cipher</span><span class="pl-c1"><span class="pl-k">.</span>ENCRYPT_MODE</span>, skeySpec, iv);

            <span class="pl-k">byte</span>[] encrypted <span class="pl-k">=</span> cipher<span class="pl-k">.</span>doFinal(value<span class="pl-k">.</span>getBytes());

            <span class="pl-k">return</span> <span class="pl-smi">Base64</span><span class="pl-k">.</span>encodeBase64String(encrypted);
        } <span class="pl-k">catch</span> (<span class="pl-smi">Exception</span> ex) {
            ex<span class="pl-k">.</span>printStackTrace();
        }

        <span class="pl-k">return</span> <span class="pl-c1">null</span>;
    }

    <span class="pl-k">public</span> <span class="pl-k">static</span> <span class="pl-smi">String</span> <span class="pl-en">decrypt</span>(<span class="pl-smi">String</span> <span class="pl-v">key</span>, <span class="pl-smi">String</span> <span class="pl-v">initVector</span>, <span class="pl-smi">String</span> <span class="pl-v">encrypted</span>) {
        <span class="pl-k">try</span> {
            <span class="pl-smi">IvParameterSpec</span> iv <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-smi">IvParameterSpec</span>(initVector<span class="pl-k">.</span>getBytes(<span class="pl-s"><span class="pl-pds">"</span>UTF-8<span class="pl-pds">"</span></span>));
            <span class="pl-smi">SecretKeySpec</span> skeySpec <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-smi">SecretKeySpec</span>(key<span class="pl-k">.</span>getBytes(<span class="pl-s"><span class="pl-pds">"</span>UTF-8<span class="pl-pds">"</span></span>), <span class="pl-s"><span class="pl-pds">"</span>AES<span class="pl-pds">"</span></span>);

            <span class="pl-smi">Cipher</span> cipher <span class="pl-k">=</span> <span class="pl-smi">Cipher</span><span class="pl-k">.</span>getInstance(<span class="pl-s"><span class="pl-pds">"</span>AES/CBC/PKCS5PADDING<span class="pl-pds">"</span></span>);
            cipher<span class="pl-k">.</span>init(<span class="pl-smi">Cipher</span><span class="pl-c1"><span class="pl-k">.</span>DECRYPT_MODE</span>, skeySpec, iv);

            <span class="pl-k">byte</span>[] original <span class="pl-k">=</span> cipher<span class="pl-k">.</span>doFinal(<span class="pl-smi">Base64</span><span class="pl-k">.</span>decodeBase64(encrypted));

            <span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-smi">String</span>(original);
        } <span class="pl-k">catch</span> (<span class="pl-smi">Exception</span> ex) {
            ex<span class="pl-k">.</span>printStackTrace();
        }

        <span class="pl-k">return</span> <span class="pl-c1">null</span>;
    }

    <span class="pl-k">public</span> <span class="pl-k">static</span> <span class="pl-k">void</span> <span class="pl-en">main</span>(<span class="pl-k">String</span>[] <span class="pl-v">args</span>) {
        <span class="pl-smi">String</span> key <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>abcdefghijklmno3<span class="pl-pds">"</span></span>; <span class="pl-c">// 128 bit key</span>
        <span class="pl-smi">String</span> initVector <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>ppqdfseerffdmhu4<span class="pl-pds">"</span></span>; <span class="pl-c">// 16 bytes IV</span>

        <span class="pl-smi">String</span> value<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>aaa<span class="pl-pds">"</span></span>;
        <span class="pl-smi">System</span><span class="pl-k">.</span>out<span class="pl-k">.</span>println(<span class="pl-s"><span class="pl-pds">"</span>加密前：<span class="pl-pds">"</span></span><span class="pl-k">+</span>value);
        value<span class="pl-k">=</span>encrypt(key, initVector, value);
        <span class="pl-smi">System</span><span class="pl-k">.</span>out<span class="pl-k">.</span>println(<span class="pl-s"><span class="pl-pds">"</span>加密后：<span class="pl-pds">"</span></span><span class="pl-k">+</span>value);
        value<span class="pl-k">=</span>decrypt(key, initVector,value);
        <span class="pl-smi">System</span><span class="pl-k">.</span>out<span class="pl-k">.</span>println(<span class="pl-s"><span class="pl-pds">"</span>解密后：<span class="pl-pds">"</span></span><span class="pl-k">+</span>value);
    }
}</pre></div>

上述加密、解密工具类需要commons-codec-1.x.jar包的支持，其中版本建议1.5或以上，低版本可能没有类中的一些方法。

在进行登录跳转时，通过一个action，获取登录参数的值。参数值一般是存在session中的，在后台获取session中的参数，并经过AES加密后传到前台。通过一个超链接，执行window.open()方法，打开登录url就行。

另外，登录url的加密参数值，需要用 encodeURIComponent()转义，因为加密参数值中一般含有特殊字符。

PS：辛辛苦苦干半年，最后还是回到解放前用的方法，忧伤~